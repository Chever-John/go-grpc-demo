// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/proto/v1/demo.proto

package demopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Demo_Add_FullMethodName          = "/demo.Demo/Add"
	Demo_SayHello_FullMethodName     = "/demo.Demo/SayHello"
	Demo_GetStream_FullMethodName    = "/demo.Demo/GetStream"
	Demo_PutStream_FullMethodName    = "/demo.Demo/PutStream"
	Demo_DoubleStream_FullMethodName = "/demo.Demo/DoubleStream"
)

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务
type DemoClient interface {
	// 简单模式。一个请求，一个响应。
	Add(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (*Response, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 服务端流模式，客户端发送一个请求，服务端返回多次。
	GetStream(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error)
	// 客户端流模式，客户端发送多次请求，服务端响应一次。
	PutStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[OneNum, Response], error)
	// 双向流，发送和接收同时进行，互不干扰
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TwoNum, Response], error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) Add(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Demo_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Demo_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetStream(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[0], Demo_GetStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TwoNum, Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_GetStreamClient = grpc.ServerStreamingClient[Response]

func (c *demoClient) PutStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[OneNum, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[1], Demo_PutStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OneNum, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_PutStreamClient = grpc.ClientStreamingClient[OneNum, Response]

func (c *demoClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TwoNum, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[2], Demo_DoubleStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TwoNum, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_DoubleStreamClient = grpc.BidiStreamingClient[TwoNum, Response]

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility.
//
// 定义服务
type DemoServer interface {
	// 简单模式。一个请求，一个响应。
	Add(context.Context, *TwoNum) (*Response, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// 服务端流模式，客户端发送一个请求，服务端返回多次。
	GetStream(*TwoNum, grpc.ServerStreamingServer[Response]) error
	// 客户端流模式，客户端发送多次请求，服务端响应一次。
	PutStream(grpc.ClientStreamingServer[OneNum, Response]) error
	// 双向流，发送和接收同时进行，互不干扰
	DoubleStream(grpc.BidiStreamingServer[TwoNum, Response]) error
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDemoServer struct{}

func (UnimplementedDemoServer) Add(context.Context, *TwoNum) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDemoServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedDemoServer) GetStream(*TwoNum, grpc.ServerStreamingServer[Response]) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedDemoServer) PutStream(grpc.ClientStreamingServer[OneNum, Response]) error {
	return status.Errorf(codes.Unimplemented, "method PutStream not implemented")
}
func (UnimplementedDemoServer) DoubleStream(grpc.BidiStreamingServer[TwoNum, Response]) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}
func (UnimplementedDemoServer) testEmbeddedByValue()              {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	// If the following call pancis, it indicates UnimplementedDemoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demo_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Add(ctx, req.(*TwoNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demo_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TwoNum)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).GetStream(m, &grpc.GenericServerStream[TwoNum, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_GetStreamServer = grpc.ServerStreamingServer[Response]

func _Demo_PutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).PutStream(&grpc.GenericServerStream[OneNum, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_PutStreamServer = grpc.ClientStreamingServer[OneNum, Response]

func _Demo_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).DoubleStream(&grpc.GenericServerStream[TwoNum, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_DoubleStreamServer = grpc.BidiStreamingServer[TwoNum, Response]

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Demo_Add_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Demo_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Demo_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       _Demo_PutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoubleStream",
			Handler:       _Demo_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/v1/demo.proto",
}
